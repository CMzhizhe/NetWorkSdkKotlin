plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
}

android {
    namespace 'com.gxx.networksdkkotlin'
    compileSdk 33

    defaultConfig {
        applicationId "com.gxx.networksdkkotlin"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }


    tasks.register("copyAgconnecToRelease"){
        doFirst{
            copy {
                from "httpConfig/release/http_config.json"
                into "./src/main/assets"
            }
        }
    }

    tasks.register("copyAgconnecToDebug"){
        doFirst{
            copy {
                from "httpConfig/debug/http_config.json"
                into "./src/main/assets"
            }
        }
    }


    afterEvaluate {
        tasks.matching {
            it.name == "mergeReleaseAssets" || it.name == "mergeDebugAssets"
        }.each {task->
            if(task.getName() == "mergeReleaseAssets" || task.getName() == "mergeDebugAssets"){
                if(task.getName() == "mergeDebugAssets" &&  isDeBugBuildType()){
                    task.dependsOn(copyAgconnecToDebug)
                }else if (task.getName() == "mergeReleaseAssets"){
                    task.dependsOn(copyAgconnecToRelease)
                }
            }
        }
    }
}


def isDeBugBuildType(){
    boolean isDebugTypes = false;
    for(String s : gradle.startParameter.taskNames) {
        if (s == "assembleDebug" || s == "bundleDebug" || s == ":app:assembleDebug" || s == ":app:bundleDebug") {
            isDebugTypes = true;
            break;
        }
    }
    return isDebugTypes;
}


dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

    //okhttp
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.11.0'
    // Retrofit åº“
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    implementation 'com.google.code.gson:gson:2.9.0'

    implementation 'com.github.CMzhizhe:Retrofit-FlowCallAdapterFactory:v1.0.0'

    // Kotlin
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2'

    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.4.1'
    implementation "androidx.lifecycle:lifecycle-runtime:2.4.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1"

    implementation 'com.squareup.moshi:moshi-kotlin:1.14.0'

    implementation project(":neworklibrary")
    //implementation 'com.github.CMzhizhe:NetWorkSdkKotlin:v1.0.2'
}